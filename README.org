* Applying Changes
#+begin_src emacs-lisp
  (defun tangle-config ()
    "Export code blocks from my literate config file."
    (when (equal (buffer-file-name) config-org)
      (org-babel-tangle-file config-org config-el)))

  (add-hook 'after-save-hook 'tangle-config)
#+end_src

* Package Resources
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))
  (package-initialize)
#+END_SRC

* Macos Key Bindings
#+BEGIN_SRC emacs-lisp
  (setq mac-option-key-is-meta nil
	mac-command-key-is-meta t
	mac-command-modifier 'meta
	mac-option-modifier 'none)
#+END_SRC

* Packages
** Use Package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (setq doom-modeline-buffer-encoding nil)
    (setq doom-modeline-vcs-max-length 30)
    (doom-modeline-mode 1))
#+end_src

** Theme
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow)
#+END_SRC

** Helm
*** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :defer nil
    :init
    (setq
     helm-M-x-always-save-history t
     helm-display-function 'pop-to-buffer
     savehist-additional-variables '(extended-command-history))
    :bind
    (("M-x" . helm-M-x)
     ("C-x C-f" . helm-find-files)
     ("C-x C-b" . helm-buffers-list)
     ("C-x b" . helm-buffers-list)
     ("C-x C-r" . helm-recentf)
     ("C-x C-i" . helm-imenu)
     ("M-y" . helm-show-kill-ring)
     :map helm-map
     ("TAB" . helm-execute-persistent-action)
     ("<tab>" . helm-execute-persistent-action)
     ("C-z" . helm-select-action)
     ("C-w" . backward-kill-word)) ;; Fix C-w
    :config
    (helm-mode)
    (savehist-mode))
#+END_SRC
*** Helm Projectile
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :bind ("C-x f" . helm-projectile))
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))
#+END_SRC

** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :init
    (beacon-mode 1))
#+END_SRC
** Shackle
#+BEGIN_SRC emacs-lisp
  (use-package shackle
    :init
    (setq shackle-rules
	  '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.3)
	    (help-mode :align t :size 0.4 :select t)))
    :defer nil
    :config
    (shackle-mode))
#+END_SRC
** Expand Region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :init
    (setq expand-region-fast-keys-enabled nil
	  expand-region-subword-enabled t)
    :bind (("C-t" . er/expand-region)))
#+END_SRC
** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    ;; :init (setq mc/always-run-for-all t)
    :bind (("C-M-n" . mc/mark-next-like-this)
	   ("C-M-p" . mc/mark-previous-like-this)
	   ("C-M-S-n" . mc/skip-to-next-like-this)
	   ("C-M-S-p" . mc/skip-to-previous-like-this)
	   ("C-S-n" . mc/unmark-previous-like-this)
	   ("C-S-p" . mc/unmark-next-like-this)
	   ("C-M-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC
** Company
*** Company
#+BEGIN_SRC emacs-lisp
  ;; TODO: Add configuration
  (use-package company
    :defer nil ;; açılışta çalıştır use package özelliği
    :init
    (setq company-idle-delay 0
	  company-minimum-prefix-length 1
	  company-tooltip-align-annotations t
	  ;; Disable single-candidate and echo-area frontends:
	  company-frontends '(company-box-frontend)
	  ;; company-dabbrev-downcase nil
	  company-dabbrev-ignore-case t)
    :bind
    (:map company-active-map
	  ([return] . nil)
	  ("RET" . nil)
	  ("TAB" . company-complete-selection)
	  ("<tab>" . company-complete-selection)
	  ("C-n" . company-select-next)
	  ("C-p" . company-select-previous))
    :config
    (global-company-mode))
  (use-package company-box)
#+END_SRC
*** Company Box
#+BEGIN_SRC emacs-lisp
  ;; (setq company-box-show-single-candidate t
  ;;       company-box-icons-alist 'company-box-icons-all-the-icons
  ;;       company-box-backends-colors nil ;; Same colors for all backends
  ;;       company-box-icons-all-the-icons
  ;;       (let ((all-the-icons-scale-factor 1)
  ;;             (all-the-icons-default-adjust 0))
  ;;         `((Unknown       . ,(all-the-icons-faicon "question" :face 'all-the-icons-purple)) ;;question-circle is also good
  ;;           (Text          . ,(all-the-icons-faicon "file-text-o" :face 'all-the-icons-green))
  ;;           (Method        . ,(all-the-icons-faicon "cube" :face 'all-the-icons-dcyan))
  ;;           (Function      . ,(all-the-icons-faicon "cube" :face 'all-the-icons-green))
  ;;           (Constructor   . ,(all-the-icons-faicon "cube" :face 'all-the-icons-dcyan))
  ;;           (Field         . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
  ;;           (Variable      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-dpurple))
  ;;           (Class         . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
  ;;           (Interface     . ,(all-the-icons-faicon "cogs" :face 'all-the-icons-red))
  ;;           (Module        . ,(all-the-icons-alltheicon "less" :face 'all-the-icons-red))
  ;;           (Property      . ,(all-the-icons-faicon "wrench" :face 'all-the-icons-red))
  ;;           (Unit          . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
  ;;           (Value         . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
  ;;           (Enum          . ,(all-the-icons-faicon "file-text-o" :face 'all-the-icons-red))
  ;;           (Keyword       . ,(all-the-icons-material "format_align_center" :face 'all-the-icons-red))
  ;;           (Snippet       . ,(all-the-icons-material "content_paste" :face 'all-the-icons-red))
  ;;           (Color         . ,(all-the-icons-material "palette" :face 'all-the-icons-red))
  ;;           (File          . ,(all-the-icons-faicon "file" :face 'all-the-icons-red))
  ;;           (Reference     . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
  ;;           (Folder        . ,(all-the-icons-faicon "folder" :face 'all-the-icons-red))
  ;;           (EnumMember    . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
  ;;           (Constant      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
  ;;           (Struct        . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
  ;;           (Event         . ,(all-the-icons-faicon "bolt" :face 'all-the-icons-red))
  ;;           (Operator      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
  ;;           (TypeParameter . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
  ;;           (Template      . ,(all-the-icons-faicon "bookmark" :face 'all-the-icons-dgreen)))))
  (use-package company-box
    :load-path (lambda () (concat user-emacs-directory "load/company-box"))
    :hook (company-mode . company-box-mode))
#+END_SRC
*** Company Statistics
#+begin_src emacs-lisp
(use-package company-statistics
  :hook (company-mode . company-statistics-mode))
#+end_src

** LSP Mode
*** LSP Mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :defer t)
#+END_SRC
*** Company LSP
#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :commands company-lsp)
#+END_SRC

** hl-todo
#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :defer nil
    :init
    ;; Better hl-todo colors, taken from spacemacs
    (setq hl-todo-keyword-faces '(("TODO" . "#dc752f")
				  ("NEXT" . "#dc752f")
				  ("THEM" . "#2d9574")
				  ("PROG" . "#4f97d7")
				  ("OKAY" . "#4f97d7")
				  ("DONT" . "#f2241f")
				  ("FAIL" . "#f2241f")
				  ("DONE" . "#86dc2f")
				  ("NOTE" . "#b1951d")
				  ("KLUDGE" . "#b1951d")
				  ("HACK" . "#b1951d")
				  ("TEMP" . "#b1951d")
				  ("HOLD" . "#dc752f")
				  ("FIXME" . "#dc752f")
				  ("XXX+" . "#dc752f")
				  ("\\?\\?\\?+" . "#dc752f")))
    :config
    (global-hl-todo-mode))
#+END_SRC
** Eglot
#+BEGIN_SRC emacs-lisp
  (use-package eglot)
  ;; :defer t
  ;; :init
  ;; (setq eglot-ignored-server-capabilites '(:documentHighlightProvider
  ;;                                          :hoverProvider
  ;;                                          :signatureHelpProvider))
  ;; :config
  ;; ;; Flymake echo error at point fix. source:
  ;; ;; https://github.com/joaotavora/eglot/issues/8#issuecomment-414149077
  ;; (advice-add 'eglot-eldoc-function :around
  ;;             (lambda (oldfun)
  ;;               (let ((help (help-at-pt-kbd-string)))
  ;;                 (if help (message "%s" help) (funcall oldfun)))))
  ;; :hook
  ;; (eglot-managed-mode . fk/company-enable-snippets))
#+END_SRC
** Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+END_SRC
** Dimmer
#+BEGIN_SRC emacs-lisp
  (use-package dimmer
    :defer t
    :config
    (setq dimmer-fraction 0.7))
#+END_SRC
* Better Defaults
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (winner-mode)
  (setq-default custom-file (concat user-emacs-directory ".custom.el"))
  (load custom-file)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
#+END_SRC

* Key Bindings
#+BEGIN_SRC emacs-lisp
  (use-package unfill
    :bind (("M-q" . unfill-toggle)))

  (use-package mwim
    :bind (("C-a" . mwim-beginning-of-code-or-line)
	   ("C-e" . mwim-end-of-code-or-line)))

  ;; source: spacemacs' better default layer
  (defun backward-kill-word-or-region ()
    "Calls `kill-region' when a region is active and
	  `backward-kill-word' otherwise."
    (interactive)
    (if (region-active-p)
	(call-interactively 'kill-region)
      (backward-kill-word 1)))

  (global-set-key (kbd "C-w") 'backward-kill-word-or-region)

  ;; Use shell-like backspace C-h, rebind help to C-?
  (keyboard-translate ?\C-h ?\C-?)
  (global-set-key (kbd "C-?") 'help-command)
  (global-set-key (kbd "M-u") 'winner-undo)
  (global-set-key (kbd "M-U") 'winner-redo)
#+END_SRC
* Programming Languages
** Python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :bind (
	   :map python-mode-map
	   ("M-." . xref-find-definitions))
    :config
    (use-package pyvenv)
    (setq python-shell-interpreter "ipython"
	  python-shell-interpreter-args "-i --simple-prompt")
    :hook
    (python-mode . eglot-ensure)
    )
#+END_SRC
** Emacs Lisp
*** Elisp Slime Nav
#+BEGIN_SRC emacs-lisp
  (use-package elisp-slime-nav
    :bind (
	   :map emacs-lisp-mode-map
	   ("M-." . elisp-slime-nav-find-elisp-thing-at-point)))
#+END_SRC

*** Aggressive Indent
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :diminish
    :hook (emacs-lisp-mode . aggressive-indent-mode))
#+end_src
